## NOTE:
## This config file overrides data/configs/cluster.hocon,
## and is merged with environment variables which start with 'EMQX_' prefix.
##
## Config changes made from EMQX dashboard UI, management HTTP API, or CLI
## are stored in data/configs/cluster.hocon.
## To avoid confusion, please do not store the same configs in both files.
##
## See https://www.emqx.io/docs/en/v5.0/configuration/configuration.html for more details.
## Configuration full example can be found in etc/examples

node {
  name = "emqx@127.0.0.1"
  cookie = "emqxsecretcookie"
  data_dir = "data"
}

listeners.tcp.my_tcp_listener {
    ## Port or Address to listen on, 0 means disable
    bind = 1883 ## or with an IP e.g. "127.0.0.1:1883"

    ## Client authentication
    ## Type:
    ##   - true :: enable
    ##   - false :: disable
    ##   - quick_deny_anonymous :: denied immediately without if username is not provided
    enable_authn = true

    ## The access control rules for this listener
    ## Type: See: https://github.com/emqtt/esockd#allowdeny
    access_rules = ["allow all"]

    ## Socket acceptor pool size for TCP protocols
    acceptors = 16

    ## Maximum number of simultaneous connections
    ## Type: infinity | Integer
    max_connections = 4096

    tcp_options {
        ## TCP backlog defines the maximum length that the queue of pending connections can grow to
        backlog = 1024

        ## The TCP send timeout for the connections
        send_timeout = 15s

        ## Timeout for proxy protocol
        send_timeout_close = true

        ## The TCP receive buffer (OS kernel) for the connections
        recbuf = 2KB

        ## The TCP send buffer (OS kernel) for the connections
        sndbuf = 4KB

        ## The size of the user-space buffer used by the driver
        buffer = 4KB

        ## The socket is set to a busy state when the amount of data queued internally by the VM socket implementation reaches this limit
        high_watermark = 1MB

        ## The TCP_NODELAY flag for the connections
        nodelay = true

        ## The SO_REUSEADDR flag for the connections
        reuseaddr = true

        ## Enable TCP keepalive for MQTT connections over TCP or SSL
        ## Type: three comma separated numbers in the format of 'Idle,Interval,Probes'
        ##    - Idle: The number of seconds a connection needs to be idle before the server begins to send out keep-alive probes (Linux default 7200).
        ##    - Interval: The number of seconds between TCP keep-alive probes (Linux default 75).
        ##    - Probes: The maximum number of TCP keep-alive probes to send before giving up and killing the connection if no response is obtained from the other end (Linux default 9).
        ## For example "240,30,5" means: EMQX should start sending TCP keepalive probes after the connection is in idle for 240 seconds, and the probes are sent every 30 seconds until a response is received from the MQTT client, if it misses 5 consecutive responses, EMQX should close the connection
        keepalive = "none"
    }
}

listeners.ssl.my_ssl_listener_name {
    ## Port or Address to listen on, 0 means disable
    bind = 8883 ## or with an IP e.g. "127.0.0.1:8883"
    enabled = true
    acceptors = 16
    enable_authn = true
    max_connections = 4096
    mountpoint = ""
    proxy_protocol = false
    proxy_protocol_timeout = 3s
    tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
    }
    ssl_options {
        ## Trusted PEM format CA certificates bundle file
        cacertfile = "${EMQX_ETC_DIR}/certs/cacert.pem"

        ## PEM format certificates chain file
        certfile = "${EMQX_ETC_DIR}/certs/cert.pem"

        ## PEM format private key file
        keyfile = "${EMQX_ETC_DIR}/certs/key.pem"

        ## Enable or disable peer verification
        verify = verify_none  ## use verify_peer to enable

        ## if `verify' is enabled, whit true, the connection fails if the client does not have a certificate to send
        fail_if_no_peer_cert = false

        ## Enable TLS session reuse
        reuse_sessions = true

        ## Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path
        depth = 10

        ## Which versions are to be supported
        versions = [tlsv1.3, tlsv1.2]

        ## TLS cipher suite names
        ## Note: By default, all available suites are supported, you do not need to set this
        ciphers = "TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,ECDHE-RSA-AES256-GCM-SHA384"

        ## Allows a client and a server to renegotiate the parameters of the SSL connection on the fly
        secure_renegotiate = true

        ## Log level for SSL communication
        ## Type: emergency | alert | critical | error | warning | notice | info | debug | none | all
        log_level = notice

        ## Hibernate the SSL process after idling for amount of time reducing its memory footprint
        hibernate_after = 5s

        ## Forces the cipher to be set based on the server-specified order instead of the client-specified order
        honor_cipher_order = true

        ##  Setting this to false to disable client-initiated renegotiation
        client_renegotiation = true

        ## Maximum time duration allowed for the handshake to complete
        handshake_timeout = 15s

        ocsp {
             enable_ocsp_stapling = false
             responder_url = "http://ocsp.example.com"
             issuer_pem = "${EMQX_ETC_DIR}/certs/ocsp-issuer-cert.pem"
             refresh_http_timeout = 15s
             refresh_interval = 5m
        }
    }
}

mqtt {
    ## After the TCP connection is established,
    ## if the MQTT CONNECT packet from the client is not received within the time specified by idle_timeout, the connection will be disconnected
    ## Type:
    ##   - infinity :: Never disconnect
    ##   - Time Duration :: The idle time
    idle_timeout = 15s

    ## Maximum MQTT packet size allowed
    max_packet_size = 1MB

    ## Maximum allowed length of MQTT Client ID
    ## Type: Rnage from 23 to 65535
    max_clientid_len = 65535

    ## Maximum topic levels allowed
    ## Type: Range from 1 to 65535
    max_topic_levels = 128

    ## Maximum QoS allowed
    max_qos_allowed = 2

    ## Maximum topic alias, 0 means no topic alias supported
    ## Type: Range from 0 to 65535
    max_topic_alias = 65535

    ## Whether to enable support for MQTT retained message
    retain_available = true

    ## Whether to enable support for MQTT wildcard subscription
    wildcard_subscription = true

    ## Whether to enable support for MQTT shared subscription
    shared_subscription = true

    ## Whether to enable support for MQTT exclusive subscription
    exclusive_subscription = false

    ## Ignore loop delivery of messages for MQTT v3.1.1/v3.1.0, similar to No Local subscription option in MQTT 5.0
    ignore_loop_deliver = false

    ## Parse MQTT messages in strict mode.
    ## When set to true, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected
    strict_mode = false

    ## Specify the response information returned to the client
    response_information  = ""

    ## The keep alive that EMQX requires the client to use
    ## Type:
    ##   - disabled :: the keep alive specified by the client will be used
    ##   - Integer :: Keepalive time, only applicable to clients using MQTT 5.0 protocol
    server_keepalive = disabled

    ## Keep-Alive Timeout = Keep-Alive interval Ã— Keep-Alive Multiplier
    keepalive_multiplier = 1.5

    ## Maximum number of subscriptions allowed per client
    ## Type: infinity | Integer
    max_subscriptions = infinity

    ## Force upgrade of QoS level according to subscription
    upgrade_qos = false

    ## Maximum number of QoS 1 and QoS 2 messages that are allowed to be delivered simultaneously before completing the acknowledgment
    ## Type: Range from 1 to 65535
    max_inflight = 32

    ## Retry interval for QoS 1/2 message delivering
    retry_interval = 30s

    ## For each publisher session, the maximum number of outstanding QoS 2 messages pending on the client to send PUBREL
    ## Type: infinity | Integer
    max_awaiting_rel = 100

    ## For client to broker QoS 2 message, the time limit for the broker to wait before the PUBREL message is received
    await_rel_timeout = 300s

    ## Specifies how long the session will expire after the connection is disconnected, only for non-MQTT 5.0 connections
    session_expiry_interval = 2h

    ## Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full
    ## Type: infinity | Integer
    max_mqueue_len = 1000

    ## Specifies whether to store QoS 0 messages in the message queue while the connection is down but the session remains
    mqueue_store_qos0 = true

    ## Whether to user Client ID as Username
    use_username_as_clientid = false

    ## Use the CN, DN field in the peer certificate or the entire certificate content as Username
    ## Type:
    ##   - disabled
    ##   - cn :: CN field of the certificate
    ##   - dn :: DN field of the certificate
    ##   - crt :: the content of the DER or PEM certificate
    ##   - pem :: PEM format content converted from DER certificate content
    ##   - md5 :: the MD5 value of the content of the DER or PEM certificate
    peer_cert_as_username = disabled

    ## Use the CN, DN field in the peer certificate or the entire certificate content as Client ID
    ## Type: See the above
    peer_cert_as_clientid = disabled

    ## Dispatch strategy for shared subscription
    ## Type:
    ##   - random :: dispatch the message to a random selected subscriber
    ##   - round_robin :: select the subscribers in a round-robin manner
    ##   - round_robin_per_group :: select the subscribers in round-robin fashion within each shared subscriber group
    ##   - local :: select random local subscriber otherwise select random cluster-wide
    ##   - sticky :: always use the last selected subscriber to dispatch, until the subscriber disconnects.
    ##   - hash_clientid :: select the subscribers by hashing the `clientIds`
    ##   - hash_topic :: select the subscribers by hashing the source topic"""
    shared_subscription_strategy = round_robin
}

#authn-redis:standalone {
#  server = localhost:6379
#  database = 0
#  password = xxx
#  mechanism = password_based
#  backend = redis
#  password_hash_algorithm = {"name":"sha256","salt_position":"prefix"}
#}

cluster {
  name = emqxcl
  discovery_strategy = manual
}

dashboard {
    listeners.http {
        bind = 18083
        #inet6 = false
    }
    #listeners.https {
    #    enable = false
    #}
    #default_username = admin
    #default_password = public
    #token_expired_time = 60m
    #i18n_lang = en
}
